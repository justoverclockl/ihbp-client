{"version":3,"sources":["../src/constants/common.ts","../src/client/Client.ts","../src/constants/selectors.ts","../src/utils/index.ts","../src/utils/elementObserver.ts","../src/client/Pwned.ts","../src/types/puppeteer.types.ts","../src/types/client.types.ts"],"sourcesContent":["import { ClientOptions, PuppeteerOptions } from '../types'\r\n\r\nexport const HIBP_URL: string = 'https://haveibeenpwned.com/'\r\nexport const HIBP_REFERRER: string = 'https://www.google.com/search?q=ihave+been+pwned&oq=ihave+been+pwned&gs_lcrp=EgZjaHJvbWUyBggAEEUYOTINCAEQLhiDARixAxiABDIHCAIQABiABDINCAMQLhjHARjRAxiABDIHCAQQLhiABDIJCAUQABgKGIAEMgcIBhAAGIAEMgcIBxAAGIAEMgcICBAAGIAE0gEIMzkwOWowajeoAgCwAgA&sourceid=chrome&ie=UTF-8'\r\n\r\nexport const DEFAULT_PUPPETEER_OPTIONS: PuppeteerOptions = {\r\n    headless: true,\r\n    defaultViewport: null,\r\n    args: [\r\n        '--no-sandbox',\r\n        '--disable-setuid-sandbox',\r\n    ],\r\n}\r\n\r\nexport const DEFAULT_CLIENT_OPTIONS: ClientOptions = {\r\n    authTimeoutMs: 0,\r\n    qrMaxRetries: 0,\r\n    takeoverOnConflict: false,\r\n    takeoverTimeoutMs: 0,\r\n    ffmpegPath: \"ffmpeg\",\r\n    bypassCSP: true,\r\n    proxyAuthentication: undefined\r\n};\r\n","import {Browser, Page} from \"puppeteer\";\r\nimport {DEFAULT_CLIENT_OPTIONS, DEFAULT_PUPPETEER_OPTIONS, HIBP_URL, HIBP_REFERRER} from \"@constants/common\";\r\nimport EventEmitter from \"node:events\";\r\nimport { Pwned } from '@client/Pwned'\r\nimport puppeteer from 'puppeteer-extra';\r\nimport StealthPlugin from 'puppeteer-extra-plugin-stealth';\r\nimport UserAgent from 'user-agents';\r\nimport {\r\n    ClientOptions,\r\n    ErrorMessageType,\r\n    EventListenerCallBack, EventsType,\r\n    IsEmailPwnedResultType, IsPwPwnedResultType,\r\n    PuppeteerOptions,\r\n} from '../types'\r\n\r\n\r\nexport class Ihbp extends EventEmitter {\r\n    private readonly puppeteerOptions?: PuppeteerOptions\r\n    private options: ClientOptions\r\n    private page?: Page\r\n    private browser?: Browser\r\n    private pwned: Pwned\r\n    private userAgent: UserAgent\r\n\r\n    constructor(options: ClientOptions, puppeteerOptions: Partial<PuppeteerOptions> = {}) {\r\n        super();\r\n        this.puppeteerOptions = {...DEFAULT_PUPPETEER_OPTIONS, ...puppeteerOptions}\r\n        this.options = { ...DEFAULT_CLIENT_OPTIONS, ...options }\r\n        this.pwned = new Pwned()\r\n        this.userAgent = new UserAgent()\r\n    }\r\n\r\n\r\n    protected when(event: string, listener: EventListenerCallBack) {\r\n        this.on(event, listener)\r\n    }\r\n\r\n    protected async init() {\r\n        await this.initializeBrowser()\r\n        await this.configurePageOptions()\r\n        await this.navigateToHIBP()\r\n    }\r\n\r\n    protected async isPasswordPwned(password: string): Promise<IsPwPwnedResultType | ErrorMessageType | undefined> {\r\n        return await this.pwned.isPasswordPwned(this.page!, password)\r\n    }\r\n\r\n    protected async isEmailPwned(email: string): Promise<IsEmailPwnedResultType | ErrorMessageType | undefined> {\r\n        await this.navigateToHIBP()\r\n        return await this.pwned.isEmailPwned(this.page!, email)\r\n    }\r\n\r\n    private async initializeBrowser(): Promise<void> {\r\n        try {\r\n            this.browser = await puppeteer\r\n                .use(StealthPlugin())\r\n                .launch(this.puppeteerOptions)\r\n            const pages: Page[] = await this.browser.pages()\r\n            this.page =\r\n                pages.length > 0 ? pages[0] : await this.browser.newPage()\r\n\r\n            if (this.browser && this.page) {\r\n                this.emit(EventsType.CLIENT_READY)\r\n            }\r\n        } catch (error) {\r\n            this.emit(EventsType.CLIENT_CRASHED)\r\n            throw error\r\n        }\r\n    }\r\n\r\n    private async configurePageOptions(): Promise<void> {\r\n        if (!this.page) return\r\n\r\n        await this.page.setViewport({\r\n            width: Math.floor(Math.random() * (1920 - 1366 + 1)) + 1366,\r\n            height: Math.floor(Math.random() * (1080 - 768 + 1)) + 768,\r\n            deviceScaleFactor: 1,\r\n            isMobile: false,\r\n            hasTouch: false,\r\n            isLandscape: false,\r\n        });\r\n\r\n        if (this.options.userAgent != null || this.options.userAgent === undefined) {\r\n            await this.page.setUserAgent(this.userAgent.random().toString())\r\n        }\r\n\r\n        if (this.options.proxyAuthentication) {\r\n            await this.page.authenticate(this.options.proxyAuthentication)\r\n        }\r\n\r\n        if (this.options.bypassCSP) {\r\n            await this.page.setBypassCSP(this.options.bypassCSP)\r\n        }\r\n\r\n        await this.page.evaluateOnNewDocument((): void => {\r\n            ;(window as any).Error = Error\r\n        })\r\n    }\r\n\r\n    private async navigateToHIBP(): Promise<void> {\r\n        await this.page?.goto(HIBP_URL, {\r\n            waitUntil: 'networkidle0',\r\n            timeout: 0,\r\n            referer: HIBP_REFERRER,\r\n        })\r\n    }\r\n\r\n    private async waitFor(ms: number, minDelay: number, maxDelay: number): Promise<void> {\r\n        const randomDelay = (min: number, max: number) => Math.floor(Math.random() * (max - min + 1)) + min\r\n        return new Promise<void>(resolve => setTimeout(() => resolve(), randomDelay(minDelay, maxDelay)));\r\n    }\r\n\r\n    private onEvent(eventName: string, cb: EventListenerCallBack): this {\r\n        return this.on(eventName, (...args: any[]) => {\r\n            cb(...args);\r\n        });\r\n    }\r\n}\r\n","export const PASSWORD_NAVBAR_LINK: string = 'a[href=\"/Passwords\"]'\r\nexport const HOME_NAVBAR_LINK: string = 'a[href=\"/Home\"]'\r\nexport const PASSWORD_INPUT: string = 'input[placeholder=\"password\"]'\r\nexport const EMAIL_INPUT: string = 'input[placeholder=\"email address\"]'\r\nexport const PWNED_BTN: string = '#searchPwnedPasswords'\r\nexport const EMAIL_BTN: string = '#searchPwnage'\r\nexport const PWNED_MESSAGE_CONTAINER: string = '.pwnTitle'\r\nexport const PWNED_MESSAGE_RESULT: string = '#pwnedPasswordResult'\r\nexport const PWNED_EMAIL_RESULT: string = '.pwnTitle'\r\n","export * from './elementObserver'\r\n","import { Page } from 'puppeteer'\r\n\r\nexport const isElementInDom = async (page: Page, elementSelector: string): Promise<boolean> => {\r\n    try {\r\n        const isElement: boolean | undefined = await page?.evaluate(async (selector: string): Promise<boolean> => {\r\n            return new Promise<boolean>((resolve): void => {\r\n                const element: Element | null = document.querySelector(selector);\r\n\r\n                if (element) {\r\n                    resolve(true);\r\n                    return;\r\n                }\r\n\r\n                const observer: MutationObserver = new MutationObserver((): void => {\r\n                    const scannedElement: Element | null = document.querySelector(selector);\r\n                    if (scannedElement) {\r\n                        observer.disconnect();\r\n                        resolve(true);\r\n                    }\r\n                });\r\n\r\n                observer.observe(document, { childList: true, subtree: true });\r\n\r\n                setTimeout(() => {\r\n                    observer.disconnect();\r\n                    resolve(false);\r\n                }, 5000);\r\n            });\r\n        }, elementSelector);\r\n\r\n        return isElement || false;\r\n    } catch (error) {\r\n        return false;\r\n    }\r\n}\r\n","import { Page } from 'puppeteer'\r\nimport {\r\n    PASSWORD_NAVBAR_LINK,\r\n    PASSWORD_INPUT,\r\n    PWNED_BTN,\r\n    PWNED_MESSAGE_CONTAINER,\r\n    PWNED_MESSAGE_RESULT, HOME_NAVBAR_LINK, EMAIL_INPUT, EMAIL_BTN, PWNED_EMAIL_RESULT,\r\n} from '@constants/selectors'\r\nimport { isElementInDom } from '../utils'\r\nimport { ErrorMessageType, IsEmailPwnedResultType, IsPwPwnedResultType } from '../types'\r\n\r\n\r\nexport class Pwned {\r\n    private readonly navLink: string = PASSWORD_NAVBAR_LINK;\r\n    private readonly pwInput: string = PASSWORD_INPUT;\r\n    private readonly emailInput: string = EMAIL_INPUT;\r\n    private readonly pwnedBtn: string = PWNED_BTN;\r\n    private readonly searchPwnageBtn: string = EMAIL_BTN;\r\n    private readonly messageContainer: string = PWNED_MESSAGE_CONTAINER;\r\n    private readonly messageEmailContainer: string = PWNED_EMAIL_RESULT;\r\n    private readonly pwnedMessage: string = PWNED_MESSAGE_RESULT;\r\n    private readonly homeLink: string = HOME_NAVBAR_LINK\r\n\r\n    constructor() {}\r\n\r\n    async isEmailPwned(page: Page, email: string): Promise<IsEmailPwnedResultType | ErrorMessageType | undefined> {\r\n        try {\r\n            await page.type(this.emailInput, email, { delay: 120 })\r\n            await page.click(this.searchPwnageBtn)\r\n\r\n            const isResponseAvailable: boolean = await this.isConfirmationMessageInDom(page, this.messageContainer)\r\n\r\n            if (isResponseAvailable) {\r\n                await this.waitFor(1500, 2500)\r\n                const messageContent: string = await page.$eval(this.messageEmailContainer, el => el.textContent?.trim() || '');\r\n\r\n                return {\r\n                    isEmailPwned: true,\r\n                    message: messageContent\r\n                };\r\n            }\r\n        } catch (error) {\r\n            return {\r\n                message: 'An error occurred',\r\n                errorMessage: error instanceof Error ? error.message : String(error)\r\n            };\r\n        }\r\n    }\r\n\r\n    async isPasswordPwned(page: Page, password: string): Promise<IsPwPwnedResultType | ErrorMessageType | undefined> {\r\n        try {\r\n            await page.waitForSelector(this.navLink, { visible: true, timeout: 50000 });\r\n            await page.click(this.navLink);\r\n            await this.waitFor(1000, 2000)\r\n            await page.type(this.pwInput, password, { delay: 120 })\r\n            await page.click(this.pwnedBtn);\r\n\r\n            const isResponseAvailable: boolean = await this.isConfirmationMessageInDom(page, this.messageContainer)\r\n\r\n            if (isResponseAvailable) {\r\n                await this.waitFor(1500, 2500)\r\n                const messageContent: string = await page.$eval(this.pwnedMessage, el => el.textContent?.trim() || '');\r\n\r\n                return {\r\n                    isPasswordPwned: true,\r\n                    message: messageContent\r\n                };\r\n            }\r\n        } catch (error) {\r\n            return {\r\n                message: 'An error occurred',\r\n                errorMessage: error instanceof Error ? error.message : String(error)\r\n            };\r\n        }\r\n    }\r\n\r\n    private async waitFor(minDelay: number, maxDelay: number): Promise<void> {\r\n        const randomDelay = (min: number, max: number) => Math.floor(Math.random() * (max - min + 1)) + min\r\n        return new Promise<void>(resolve => setTimeout(() => resolve(), randomDelay(minDelay, maxDelay)));\r\n    }\r\n\r\n    private async isConfirmationMessageInDom(page: Page, selector: string): Promise<boolean> {\r\n        try {\r\n            return await isElementInDom(page, selector)\r\n        } catch (error) {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n","export type PuppeteerArgs =\n    | '--no-sandbox'\n    | '--disable-setuid-sandbox'\n    | '--disable-infobars'\n    | '--single-process'\n    | '--no-zygote'\n    | '--no-first-run'\n    | '--window-position=0,0'\n    | '--ignore-certificate-errors'\n    | '--ignore-certificate-errors-skip-list'\n    | '--disable-dev-shm-usage'\n    | '--disable-accelerated-2d-canvas'\n    | '--disable-gpu'\n    | '--hide-scrollbars'\n    | '--disable-notifications'\n    | '--disable-background-timer-throttling'\n    | '--disable-backgrounding-occluded-windows'\n    | '--disable-breakpad'\n    | '--disable-component-extensions-with-background-pages'\n    | '--disable-extensions'\n    | '--disable-features=TranslateUI,BlinkGenPropertyTrees'\n    | '--disable-ipc-flooding-protection'\n    | '--disable-renderer-backgrounding'\n    | '--enable-features=NetworkService,NetworkServiceInProcess'\n    | '--force-color-profile=srgb'\n    | '--metrics-recording-only'\n    | '--mute-audio'\n    | '--disable-web-security'\n    | '--auto-open-devtools-for-tabs'\n\n\nexport interface PuppeteerOptions {\n    headless: boolean\n    defaultViewport: null\n    args: PuppeteerArgs[]\n}\n\nexport interface ClientOptions {\n    browserWSEndpoint?: string\n    browserURL?: string\n    authTimeoutMs?: number\n    qrMaxRetries?: number\n    takeoverOnConflict?: boolean\n    takeoverTimeoutMs?: number\n    userAgent?: string\n    ffmpegPath?: 'ffmpeg'\n    bypassCSP?: boolean\n    proxyAuthentication?: undefined\n    userDataPath?: string\n}\n","import EventEmitter from 'node:events'\r\nimport { ClientOptions, PuppeteerOptions } from './puppeteer.types'\r\nimport { Browser, Page } from 'puppeteer'\r\nimport { Pwned } from '@client/Pwned'\r\nimport UserAgent from 'user-agents'\r\n\r\nexport type EventListenerCallBack = (...args: any[]) => any | void;\r\n\r\nexport type ErrorMessageType = {\r\n    message: string\r\n    errorMessage: string | unknown\r\n}\r\n\r\nexport type IsPwPwnedResultType = {\r\n    isPasswordPwned: boolean\r\n    message: string\r\n}\r\n\r\nexport type IsEmailPwnedResultType = {\r\n    isEmailPwned: boolean\r\n    message: string\r\n}\r\n\r\nexport declare class Ihbp extends EventEmitter {\r\n    private readonly puppeteerOptions?: PuppeteerOptions;\r\n    private options: ClientOptions;\r\n    private page?: Page;\r\n    private browser?: Browser;\r\n    private pwned: Pwned;\r\n    private userAgent: UserAgent;\r\n\r\n    constructor(options: ClientOptions, puppeteerOptions?: Partial<PuppeteerOptions>);\r\n\r\n    when(event: string, listener: EventListenerCallBack): void;\r\n\r\n    protected init(): Promise<void>;\r\n\r\n    protected isPasswordPwned(password: string): Promise<IsPwPwnedResultType>;\r\n\r\n    protected isEmailPwned(email: string): Promise<IsEmailPwnedResultType>;\r\n\r\n    private initializeBrowser(): Promise<void>;\r\n\r\n    private configurePageOptions(): Promise<void>;\r\n\r\n    private navigateToHIBP(): Promise<void>;\r\n\r\n    private waitFor(ms: number, minDelay: number, maxDelay: number): Promise<void>;\r\n\r\n    private onEvent(eventName: string, cb: EventListenerCallBack): this;\r\n}\r\n"],"mappings":"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","names":["common_exports","__export","DEFAULT_CLIENT_OPTIONS","DEFAULT_PUPPETEER_OPTIONS","HIBP_REFERRER","HIBP_URL","EventEmitter","selectors_exports","__export","EMAIL_BTN","EMAIL_INPUT","HOME_NAVBAR_LINK","PASSWORD_INPUT","PASSWORD_NAVBAR_LINK","PWNED_BTN","PWNED_EMAIL_RESULT","PWNED_MESSAGE_CONTAINER","PWNED_MESSAGE_RESULT","utils_exports","__export","isElementInDom","isElementInDom","page","elementSelector","selector","resolve","observer","Pwned","PASSWORD_NAVBAR_LINK","PASSWORD_INPUT","EMAIL_INPUT","PWNED_BTN","EMAIL_BTN","PWNED_MESSAGE_CONTAINER","PWNED_EMAIL_RESULT","PWNED_MESSAGE_RESULT","HOME_NAVBAR_LINK","page","email","el","error","password","minDelay","maxDelay","randomDelay","min","max","resolve","selector","isElementInDom","puppeteer","StealthPlugin","UserAgent","puppeteer_types_exports","client_types_exports","Ihbp","EventEmitter","options","puppeteerOptions","DEFAULT_PUPPETEER_OPTIONS","DEFAULT_CLIENT_OPTIONS","Pwned","UserAgent","event","listener","password","email","puppeteer","StealthPlugin","pages","error","HIBP_URL","HIBP_REFERRER","ms","minDelay","maxDelay","randomDelay","min","max","resolve","eventName","cb","args"]}